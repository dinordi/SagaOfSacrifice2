classDiagram
    direction TB  // Top-to-Bottom layout for hierarchical view

    %% Client side classes
    class Game {
        - multiplayerManager : unique_ptr~MultiplayerManager~
        - multiplayerActive : bool
        + initializeMultiplayer(serverAddress : string, serverPort : int, playerId : string) : bool
        + shutdownMultiplayer() 
        + isMultiplayerActive() : bool
        + getMultiplayerManager() : MultiplayerManager*
        + sendChatMessage(message : string)
        + setChatMessageHandler(handler : function)
        + generateRandomPlayerId() : string
        + updateRemotePlayers(remotePlayers : map)
    }

    class NetworkInterface {
        <<Interface>>
        + connect(address : string, port : int) : bool
        + disconnect()
        + sendMessage(message : NetworkMessage) : bool
        + isConnected() : bool
        + setMessageHandler(handler : function)
    }

    class AsioNetworkClient {
        - ioContext : asio::io_context
        - socket : tcp::socket
        - readBuffer : vector~uint8_t~
        - messageHandler : function
        + connect(address : string, port : int) : bool
        + disconnect()
        + sendMessage(message : NetworkMessage) : bool
        + isConnected() : bool
        + setMessageHandler(handler : function)
        - asyncRead()
        - processReadBuffer()
    }
    AsioNetworkClient --|> NetworkInterface : implements

    class MultiplayerManager {
        - network_ : unique_ptr~NetworkInterface~
        - playerId_ : string
        - localPlayer_ : Player*
        - remotePlayers_ : map~string, unique_ptr~RemotePlayer~~
        - lastUpdateTime_ : uint64_t
        - chatHandler_ : function
        + initialize(serverAddress : string, serverPort : int, playerId : string) : bool
        + shutdown()
        + update(deltaTime : uint64_t)
        + setLocalPlayer(player : Player*)
        + sendPlayerState()
        + isConnected() : bool
        + getRemotePlayers() : map&
        + sendChatMessage(message : string)
        + setChatMessageHandler(handler : function)
        - handleNetworkMessage(message : NetworkMessage)
        - handlePlayerPositionMessage(message : NetworkMessage)
        - handlePlayerActionMessage(message : NetworkMessage)
        - handleGameStateMessage(message : NetworkMessage)
        - handleChatMessage(message : NetworkMessage)
        - handlePlayerConnectMessage(message : NetworkMessage)
        - handlePlayerDisconnectMessage(message : NetworkMessage)
        - serializePlayerState(player : Player*) : vector~uint8_t~
        - deserializePlayerState(data : vector~uint8_t~, player : RemotePlayer*)
    }

    class NetworkMessage {
        + type : MessageType
        + senderId : string
        + data : vector~uint8_t~
        + serialize() : vector~uint8_t~
        + deserialize(data : vector~uint8_t~) : bool
    }

    class MessageType {
        <<Enumeration>>
        PLAYER_POSITION
        PLAYER_ACTION
        GAME_STATE
        CHAT_MESSAGE
        CONNECT
        DISCONNECT
        PING
    }

    class Player {
        // Core player attributes and methods
    }

    class RemotePlayer {
        - id_ : string
        - orientation_ : float
        - state_ : int
        + RemotePlayer(id : string)
        + update(deltaTime : uint64_t)
        + setOrientation(orientation : float)
        + setState(state : int)
        + accept(visitor : CollisionVisitor&)
    }
    RemotePlayer --|> Object : inherits

    %% Server side classes
    class GameServer {
        - ioContext : asio::io_context
        - acceptor : tcp::acceptor
        - sessions : map~string, shared_ptr~GameSession~~
        - sessionsMutex : mutex
        + GameServer(ioContext : io_context&, port : int)
        + start()
        + stop()
        + addSession(playerId : string, session : shared_ptr~GameSession~)
        + removeSession(playerId : string)
        + broadcastMessage(message : NetworkMessage)
        + broadcastMessageExcept(message : NetworkMessage, excludedPlayerId : string)
        + sendMessageToPlayer(message : NetworkMessage, targetPlayerId : string) : bool
        + isPlayerConnected(playerId : string) : bool
        - startAccept()
    }

    class GameSession {
        - socket : tcp::socket
        - server : GameServer*
        - readBuffer : vector~uint8_t~
        - playerId : string
        - connected : bool
        + start()
        + stop()
        + sendMessage(message : NetworkMessage) : bool
        + getPlayerId() : string
        - asyncRead()
        - processReadBuffer()
        - handleMessage(message : NetworkMessage)
    }

    %% Relationships
    Game *-- MultiplayerManager : contains
    MultiplayerManager *-- NetworkInterface : contains
    MultiplayerManager o-- Player : references
    MultiplayerManager *-- "many" RemotePlayer : manages
    GameServer *-- "many" GameSession : manages
    MultiplayerManager ..> NetworkMessage : uses
    GameServer ..> NetworkMessage : uses
    GameSession ..> NetworkMessage : uses
    AsioNetworkClient ..> NetworkMessage : uses
    NetworkMessage *-- MessageType : contains
    GameSession ..> GameServer : uses