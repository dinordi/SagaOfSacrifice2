classDiagram
    direction LR  // Layout Left-to-Right for better readability

    class Vec2 {
        + x : float
        + y : float
        + operator+() : Vec2
        + operator-() : Vec2
        + operator*() : Vec2
        + operator+=() : Vec2
        + dot() : float
        + length() : float
        + normalize() : Vec2
    }

    class SpriteData {
        + width : int
        + height : int
        + columns : int
        + SpriteData(id : string, width : int, height : int, columns : int)
        + getSpriteRect(index : int) : SpriteRect
        - id_ : string
        + getid_() : const string&
    }

    class SpriteRect {
        + x : int
        + y : int
        + w : int
        + h : int
        + id_ : string
        + SpriteRect(x : int, y : int, w : int, h : int, id : string)
    }

    class AnimationState {
        <<Enumeration>>
        IDLE
        WALKING
        RUNNING
        JUMPING
        FALLING
        ATTACKING
        HURT
        DYING
        CUSTOM
    }

    class AnimationDef {
        + startFrame : int
        + frameCount : int
        + framesPerRow : int
        + frameTime : uint32_t
        + loop : bool
        + AnimationDef(start : int, count : int, fpr : int, time : uint32_t, doLoop : bool)
    }

    class AnimationController {
        - animations : map<AnimationState, AnimationDef>
        - currentState : AnimationState
        - currentFrame : int
        - elapsedTime : uint32_t
        - finished : bool
        + AnimationController()
        + addAnimation(state : AnimationState, def : AnimationDef)
        + setState(state : AnimationState)
        + update(deltaTime : uint64_t)
        + getCurrentFrame() : int
        + isFinished() : bool
    }

    class Object {
        # position : Vec2
        # velocity : Vec2
        + type : ObjectType
        + spriteData : SpriteData*
        + Object(pos : Vec2, type : ObjectType, spData : SpriteData*, ID : string)
        + update(deltaTime : uint64_t)*
        + accept(visitor : CollisionVisitor)*
        + updateAnimation(deltaTime : uint64_t)
        + setAnimationState(state : AnimationState)
        + getCurrentSpriteIndex() : int
        + addAnimation(state : AnimationState, startFrame : int, frameCount : int, framesPerRow : int, frameTime : uint32_t, loop : bool)
        + isFacingRight() : bool
        + getposition() : Vec2&
        + getvelocity() : Vec2&
        + setposition(pos : Vec2)
        + setvelocity(vel : Vec2)
        + getObjID() : const string&
        # animController : AnimationController
        # facingRight : bool
        - ObjID : string
    }

    class Actor {
        + spriteData : SpriteData*
        + spriteIndex : int
        + Actor(pos : Vec2, spData : SpriteData*, spriteIndex : uint32_t)
        - position : Vec2
        + getposition() : Vec2&
        + setposition(pos : Vec2)
    }

    class Entity {
        - isOnGround : bool
        + Entity(pos : Vec2, spData : SpriteData*, objID : string)
        + getisOnGround() : bool
        + setisOnGround(onGround : bool)
    }
    Entity --|> Object : inherits

    class Player {
        - input : PlayerInput*
        - health : int
        - isAttacking : bool
        - isJumping : bool
        - attackTimer : uint32_t
        + Player(pos : Vec2, spData : SpriteData*, objID : string)
        + setInput(input : PlayerInput*)
        + update(deltaTime : uint64_t)
        + accept(visitor : CollisionVisitor)
        + handleInput(input : PlayerInput*, deltaTime : uint64_t)
        + takeDamage(amount : int)
        + collectItem()
        + applyPhysicsResponse(resolutionVector : Vec2)
        - setupAnimations()
        - updateAnimationState()
        - isMoving() : bool
    }
    Player --|> Entity : inherits

    class Platform {
        + Platform(ID : int, x : int, y : int)
        + update(deltaTime : uint64_t)
        + accept(visitor : CollisionVisitor)
        + isBreakable() : bool
    }
    Platform --|> Object : inherits

    class Enemy {
        + health : int
        + accept(visitor : CollisionVisitor)
        + takeDamage(amount : int)
        + reverseDirection()
        + applyPhysicsResponse(resolutionVector : Vec2)
    }
    Enemy --|> Entity : inherits

    class CollisionVisitor {
        <<Interface>>
        + visit(player : Player)*
        + visit(enemy : Enemy)*
        + visit(platform : Platform)*
    }

    class CollisionHandler {
        - initiator : Object*
        - info : CollisionInfo
        + CollisionHandler(initiator : Object*, info : CollisionInfo)
        + visit(player : Player)
        + visit(enemy : Enemy)
        + visit(platform : Platform)
        # handleInteraction(player : Player)
        # handleInteraction(enemy : Enemy)
        # handleInteraction(platform : Platform)
    }
    CollisionHandler --|> CollisionVisitor : implements

    class CollisionInfo {
        + penetrationVector : Vec2
        + contactPoint : Vec2
    }

    class CollisionManager {
        + detectCollisions(gameObjects : List~Object*~) : List~Pair~Object*,Object*~~
        + resolveCollision(objA : Object*, objB : Object*, info : CollisionInfo)
    }
    CollisionManager ..> Object : uses
    CollisionManager ..> CollisionHandler : creates/uses
    CollisionManager ..> CollisionInfo : uses

    class Game {
        - running : bool
        - isPaused : bool
        - objects : vector<Object*>
        - actors : vector<Actor*>
        - input : PlayerInput*
        - collisionManager : CollisionManager*
        - player : Player*
        - multiplayerManager : unique_ptr<MultiplayerManager>
        - multiplayerActive : bool
        + Game(input : PlayerInput*)
        + ~Game()
        + update(deltaTime : uint64_t)
        + isRunning() : bool
        + generateRandomPlayerId() : string
        + initializeMultiplayer(serverAddress : string, serverPort : int, playerId : string) : bool
        + shutdownMultiplayer() 
        + isMultiplayerActive() : bool
        + getMultiplayerManager() : MultiplayerManager*
        + sendChatMessage(message : string)
        + setChatMessageHandler(handler : function)
        + getObjects() : vector<Object*>&
        + getActors() : vector<Actor*>&
    }
    Game ..> Object : manages
    Game ..> Actor : manages
    Game ..> PlayerInput : uses
    Game ..> CollisionManager : uses
    Game ..> Player : references

    class PlayerInput {
        <<Interface>>
        + read()*
        + get_jump() : bool*
        + get_left() : bool
        + get_right() : bool
        + get_attack() : bool
    }

    Object ..> CollisionVisitor : uses (accept method parameter)
    Object ..> AnimationController : contains
    Player ..> PlayerInput : uses
    SpriteData ..> SpriteRect : returns
    CollisionHandler ..> Object : uses (initiator member, parameters in handleInteraction)
    CollisionHandler ..> CollisionInfo : uses
    CollisionHandler ..> Player : calls methods on
    CollisionHandler ..> Enemy : calls methods on
    CollisionHandler ..> Platform : calls methods on