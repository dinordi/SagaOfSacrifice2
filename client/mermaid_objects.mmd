classDiagram
    direction LR  %% Layout Left-to-Right for better readability
    
    %% Game Object Hierarchy
    
    class Object {
        # position : Vec2
        # velocity : Vec2
        + type : ObjectType
        + spriteData : SpriteData*
        + Object(pos : Vec2, type : ObjectType, spData : SpriteData*, ID : string)
        + update(deltaTime : uint64_t)*
        + accept(visitor : CollisionVisitor)*
        + updateAnimation(deltaTime : uint64_t)
        + setAnimationState(state : AnimationState)
        + getCurrentSpriteIndex() : int
        + addAnimation(state : AnimationState, startFrame : int, frameCount : int, framesPerRow : int, frameTime : uint32_t, loop : bool)
        + isFacingRight() : bool
        + getposition() : Vec2&
        + getvelocity() : Vec2&
        + setposition(pos : Vec2)
        + setvelocity(vel : Vec2)
        + getObjID() : const string&
        # animController : AnimationController
        # facingRight : bool
        - ObjID : string
    }

    class Actor {
        + spriteData : SpriteData*
        + spriteIndex : int
        + Actor(pos : Vec2, spData : SpriteData*, spriteIndex : uint32_t)
        - position : Vec2
        + getposition() : Vec2&
        + setposition(pos : Vec2)
    }

    class Entity {
        - isOnGround : bool
        + Entity(pos : Vec2, spData : SpriteData*, objID : string)
        + getisOnGround() : bool
        + setisOnGround(onGround : bool)
    }
    
    class Player {
        - input : PlayerInput*
        - health : int
        - isAttacking : bool
        - isJumping : bool
        - attackTimer : uint32_t
        + Player(pos : Vec2, spData : SpriteData*, objID : string)
        + setInput(input : PlayerInput*)
        + update(deltaTime : uint64_t)
        + accept(visitor : CollisionVisitor)
        + handleInput(input : PlayerInput*, deltaTime : uint64_t)
        + takeDamage(amount : int)
        + collectItem()
        + applyPhysicsResponse(resolutionVector : Vec2)
        - setupAnimations()
        - updateAnimationState()
        - isMoving() : bool
    }
    
    class Platform {
        + Platform(ID : int, x : int, y : int)
        + update(deltaTime : uint64_t)
        + accept(visitor : CollisionVisitor)
        + isBreakable() : bool
    }
    
    class Enemy {
        + health : int
        + accept(visitor : CollisionVisitor)
        + takeDamage(amount : int)
        + reverseDirection()
        + applyPhysicsResponse(resolutionVector : Vec2)
    }
    
    Entity --|> Object : inherits
    Player --|> Entity : inherits
    Platform --|> Object : inherits
    Enemy --|> Entity : inherits
    
    Object ..> CollisionVisitor : uses (accept method parameter)
    Object ..> AnimationController : contains
    Player ..> PlayerInput : uses